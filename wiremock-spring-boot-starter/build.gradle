buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.9.RELEASE'
    }
}

plugins {
    id 'java'
    id 'maven'
    id 'maven-publish'
    id 'eclipse'
}

task setupVariables << {
    def nexusUsername = project.findProperty("nexusUsername") ?: System.getenv("nexusUsername")
    def nexusPassword = project.findProperty("nexusPassword") ?: System.getenv("nexusPassword")
    def signingKeyId = project.findProperty("signing.keyId") ?: System.getenv("SIGNING_KEY_ID")
    def signingPassword = project.findProperty("signing.password") ?: System.getenv("SIGNING_PASSWORD")
    def signingSecretKeyRingFile = project.findProperty("signing.secretKeyRingFile") ?: System.getenv("SIGNING_SECRET_KEY_RING_FILE")

    println "Key is null: ${signingKeyId == null} "

    def file = new File(signingSecretKeyRingFile)

    print "File exists: ${file.exists()}"

    if (!nexusUsername || !nexusPassword) {
        throw new RuntimeException("nexusUsername and/or nexusPassword are not defined environment variables")
    }

    if (!signingKeyId || !signingPassword || !signingSecretKeyRingFile) {
        throw new RuntimeException("signing keyId and/or password and/or secretKeyRingFile are not defined environment variables")
    }

    System.properties.setProperty("nexusUsername", nexusUsername)
    System.properties.setProperty("nexusPassword", nexusPassword)
    System.properties.setProperty("signing.keyId", signingKeyId)
    System.properties.setProperty("signing.password", signingPassword)
    System.properties.setProperty("signing.secretKeyRingFile", signingSecretKeyRingFile)
}


uploadArchives.dependsOn('setupVariables')

apply plugin: 'org.springframework.boot'

repositories {
    jcenter()
}

sourceCompatibility = 1.7
targetCompatibility = 1.7
group = 'com.epages'
description = 'Spring Boot Starter for adding a WireMock server to your integration test'

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-test'
    compile 'org.springframework.boot:spring-boot-starter'
    compileOnly 'org.springframework.boot:spring-boot-configuration-processor'
    compile 'com.github.tomakehurst:wiremock-standalone:2.18.0'
    testCompile 'org.springframework:spring-web'
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}

bootRepackage.enabled = false

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId 'wiremock-spring-boot-starter'
            groupId = project.group

            artifact sourceJar {
                classifier 'sources'
            }
            artifact javadocJar
        }
    }
}

apply plugin: 'com.bmuschko.nexus'

archivesBaseName = 'wiremock-spring-boot-starter'
group = project.group
version = project.version

modifyPom {
    project {
        name 'wiremock-spring-boot-starter'
        description 'Spring REST Docs WireMock Integration.'
        url 'https://github.com/ePages-de/restdocs-wiremock'
        inceptionYear '2021'

        scm {
            url 'https://github.com/ePages-de/restdocs-wiremock'
            connection 'scm:https://github.com/ePages-de/restdocs-wiremock.git'
            developerConnection 'scm:git://github.com/ePages-de/restdocs-wiremock.git'
        }

        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'ePages'
                name 'ePages'
                email 'ePages@ePages.com'
            }
        }
    }
}

extraArchive {
    sources = true
    tests = false
    javadoc = true
}

nexus {
    sign = true
    repositoryUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
    snapshotRepositoryUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
}
